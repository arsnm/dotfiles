#!/bin/bash

# A setup script for my configuration

# Meant to be run on every new machine i use / work on in order to have all of my 
# essential tools quickly and out of the box (should work on WSL and macOS)

FORMULAE=(
    git
    neovim
    fzf
    tmux
    starship
    ripgrep
    gcc
    pyenv
    opam
)

CASKS=(
    1password-cli
    1password
    google-chrome
    alacritty
    mactex
    amethyst
    sioyek
    linearmouse
    raycast
    hiddenbar
    font-jetbrains-mono-nerd-font
    obsidian
)

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# create directories
export XDG_CONFIG_HOME="$HOME/.config"

# symbolic links
echo "Creating symbolic links..."
ln -sfn "$PWD/alacritty" "$XDG_CONFIG_HOME/alacritty"
ln -sfn "$PWD/zsh" "$XDG_CONFIG_HOME/zsh"
ln -sfn "$PWD/tmux" "$XDG_CONFIG_HOME/tmux"
ln -sfn "$PWD/.zshrc" "$HOME/.zshrc"
ln -sfn "$PWD/starship.toml" "$XDG_CONFIG_HOME/starship.toml"
ln -sfn "$PWD/nvim" "$XDG_CONFIG_HOME/nvim"
ln -sfn "$PWD/kitty" "$XDG_CONFIG_HOME/kitty"
ln -sfn "$PWD/ghostty" "$XDG_CONFIG_HOME/ghostty"
ln -sfn "$PWD/hypr" "$XDG_CONFIG_HOME/hypr"
ln -sfn "$PWD/git" "$XDG_CONFIG_HOME/git"
ln -sfn "$PWD/latexmk" "$XDG_CONFIG_HOME/latexmk"

# check for os system
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

#packages installation

if [ "$machine" == "Mac" ]; then
    echo "Starting setup for mac..."

    # Oh My Zsh installation
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        read -p "Oh My Zsh is not installed. Do you want to install it? (y/n): " install_omz

        if [[ "$install_omz" =~ ^[Yy]$ ]]; then
            echo "Installing Oh My Zsh..."
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        else
            echo "Skipping Oh My Zsh installation."
        fi
    else
        echo "Oh My Zsh is already installed."
    fi

    # Homebrew installation
    if ! command_exists brew; then
        read -p "Homebrew not found. Do you want to install it? (y/n): " install_homebrew
	if [[ "$install_homebrew" =~ ^[Yy]$ ]]; then
	    echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	else
	   echo "Not installing Homebrew."
	fi
    fi
    if command_exists brew; then
        echo "Updating/Upgrading Homebrew..."
        brew update
        brew upgrade

        read -p "Do you want to install homebrew formulae and casks? (y/n): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            echo "Installing formulae..."
            for formula in "${FORMULAE[@]}"; do
                if brew list "$formula" &>/dev/null; then
                    echo "$formula is already installed."
                else
                    echo "Installing $formula..."
                    brew install "$formula"
                fi
            done

            echo "Installing casks..."
            for cask in "${CASKS[@]}"; do
                if brew list --cask "$cask" &>/dev/null; then
                    echo "$cask is already installed."
                else
                    echo "Installing $cask..."
                    brew install --cask "$cask"
                fi
            done
       else
           echo "Installation canceled."
       fi

       echo "Cleaning up..."
       brew cleanup
    fi
elif [ "$machine" == "Linux" ]; then
    echo "Starting setup on Linux"
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        read -p "Oh My Zsh is not installed. Do you want to install it? (y/n): " install_omz

        if [[ "$install_omz" =~ ^[Yy]$ ]]; then
            echo "Installing Oh My Zsh..."
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        else
            echo "Skipping Oh My Zsh installation."
        fi
    else
        echo "Oh My Zsh is already installed."
    fi
fi
